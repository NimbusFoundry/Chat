// Generated by CoffeeScript 1.8.0
(function() {
  var define_controller;

  define('workspaces', ['require', 'core/analytic'], function(require, analytic) {
    var c_file, doc_plugin;
    c_file = Nimbus.realtime.c_file;
    return doc_plugin = {
      type: 'plugin',
      name: 'workspace',
      order: -13,
      icon: 'icon-folder-close',
      _app_files: [],
      _app_folders: [],
      init: function() {
        var self;
        self = this;
        if (localStorage['last_opened_workspace'] && (localStorage['last_opened_workspace'] !== Nimbus.realtime.c_file.id)) {
          this.open({
            id: localStorage['last_opened_workspace']
          });
        } else {
          localStorage['last_opened_workspace'] = Nimbus.realtime.c_file.id;
          foundry.shared_users(function(users) {
            var _users;
            _users = users;
            return foundry.current_user(function(me) {
              var user, _i, _len;
              for (_i = 0, _len = _users.length; _i < _len; _i++) {
                user = _users[_i];
                if (user.id === me.id) {
                  foundry._current_user.role = user.role;
                }
              }
              if (!foundry._current_user.email) {
                foundry._current_user.email = Nimbus.Share.get_user_email();
              }
              console.log(_users);
              return foundry.initialized(self.name);
            });
          });
        }
        return define_controller();
      },
      inited: function() {
        log('inited');
        if (this.switch_callback) {
          this.switch_callback();
        }
        return console.log(analytic);
      },
      switch_callback: null,
      all_doc: function() {
        this._app_files = Nimbus.realtime.app_files;
        return this._app_files;
      },
      open: function(doc, callback) {
        localStorage['last_opened_workspace'] = doc.id;
        Nimbus.Share.switch_to_app_file_real(doc.id, function() {
          if (callback) {
            callback();
          }
          angular.element(document).scope().$apply();
          ga('set', 'dimension2', Nimbus.realtime.c_file.title);
          ga('set', 'dimension3', Nimbus.realtime.c_file.owners[0].emailAddress + ':' + Nimbus.realtime.c_file.owners[0].displayName);
          ga('set', 'dimension4', foundry._models.User.all());
        });
      },
      create: function(name, callback) {
        var self;
        if (!name) {
          console.log('name required');
        }
        self = this;
        Nimbus.Share.create_workspace(name, function(data) {
          if (callback) {
            callback(data);
          }
          angular.element(document).scope().$apply();
        });
        analytic.owner({
          id: foundry._current_user.id,
          email: foundry._current_user.email,
          date: new Date().getTime(),
          'name': name
        });
      },
      current: function() {
        return Nimbus.realtime.c_file;
      },
      is_current: function(doc) {
        return doc.id === Nimbus.realtime.c_file.id;
      },
      rename: function(doc, name, cb) {
        var id, old_name, param, request, self;
        self = this;
        id = doc.id;
        old_name = doc.title;
        param = {
          path: "/drive/v2/files/" + id,
          method: "PATCH",
          params: {
            key: Nimbus.Auth.key,
            fileId: id
          },
          body: {
            title: name
          },
          callback: function(file) {
            var apply_changes, folder, index, query, rename_folder, _file, _ref;
            _ref = Nimbus.realtime.app_files;
            for (index in _ref) {
              _file = _ref[index];
              if (doc.id === _file.id) {
                file.title = name;
              }
            }
            folder = Nimbus.realtime.folder.binary_files;
            apply_changes = function(changed_file) {
              if (cb) {
                cb(changed_file);
              }
              return angular.element(document).scope().$apply();
            };
            rename_folder = function(target, replace) {
              return self.rename_folder(target, name + ' files', function(f) {
                if (replace) {
                  window.folder.binary_files = f;
                }
                return apply_changes(file);
              });
            };
            if (c_file.id !== id) {
              query = "mimeType = 'application/vnd.google-apps.folder' and title = '" + old_name + " files' and properties has { key='space' and value='" + id + "' and visibility='PRIVATE' }";
              Nimbus.Client.GDrive.getMetadataList(query, function(data) {
                if (!data.error) {
                  if (data.items.length >= 1) {
                    folder = data.items[0];
                    return rename_folder(folder);
                  } else {
                    return apply_changes();
                  }
                } else {
                  return apply_changes();
                }
              });
            } else {
              rename_folder(folder, true);
            }
          }
        };
        request = gapi.client.request(param);
      },
      rename_folder: function(folder, name, cb) {
        var id, param, request;
        log('rename the folder');
        id = folder.id;
        param = {
          path: "/drive/v2/files/" + id,
          method: "PATCH",
          params: {
            key: Nimbus.Auth.key,
            fileId: id
          },
          body: {
            title: name
          },
          callback: function(file) {
            if (cb) {
              cb(file);
            }
            return angular.element(document).scope().$apply();
          }
        };
        request = gapi.client.request(param);
      },
      del_doc: function(doc, callback) {
        var file, index, _ref, _ref1;
        if (doc.id === Nimbus.realtime.c_file.id) {
          return;
        }
        Nimbus.Client.GDrive.deleteFile(doc.id);
        _ref = this._app_files;
        for (index in _ref) {
          file = _ref[index];
          if (doc.id === file.id) {
            this._app_files.splice(index, 1);
          }
        }
        _ref1 = Nimbus.realtime.app_files;
        for (index in _ref1) {
          file = _ref1[index];
          if (doc.id === file.id) {
            Nimbus.realtime.app_files.splice(index, 1);
          }
        }
      }
    };
  });

  define_controller = function() {
    angular.module('foundry').controller('ProjectController', [
      '$scope', '$rootScope', 'ngDialog', '$foundry', function($scope, $rootScope, ngDialog, $foundry) {
        var docModule;
        docModule = foundry.load('workspace');
        $rootScope.breadcum = 'Workspace';
        $scope.filename = '';
        $scope.current_edit = -1;
        $scope.load = function() {
          return $scope.projects = docModule.all_doc();
        };
        $scope.is_loaded = function(doc) {
          return docModule.is_current(doc);
        };
        $scope.add_document = function() {
          $scope.filename = '';
          ngDialog.open({
            template: 'newfile',
            controller: this,
            scope: $scope
          });
        };
        $scope.create_doc = function() {
          var spinner;
          ngDialog.close();
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Creating ' + $scope.filename + '...'
          });
          docModule.create($scope.filename, function(file) {
            var index, project, _ref;
            if (file.title === $scope.filename) {
              $scope.load();
              spinner.hide();
              _ref = $scope.projects;
              for (index in _ref) {
                project = _ref[index];
                if (file.id === project.id) {
                  $scope["switch"](index);
                  return;
                }
              }
            }
          });
        };
        $scope.edit = function(index) {
          var doc;
          doc = $scope.projects[index];
          $scope.current_edit = index;
          $scope.newname = doc.title;
          ngDialog.open({
            template: 'rename',
            scope: $scope
          });
        };
        $scope["switch"] = function(index) {
          var doc, spinner;
          $scope.current_doc = doc = $scope.projects[index];
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Switching...'
          });
          docModule.open(doc, function() {
            $scope.load();
            return spinner.hide();
          });
        };
        $scope.rename = function() {
          var doc, spinner;
          doc = $scope.projects[$scope.current_edit];
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Renaming...'
          });
          ngDialog.close();
          docModule.rename(doc, $scope.newname, function(file) {
            console.log(file);
            $scope.load();
            return spinner.hide();
          });
        };
        $scope.delet_doc = function(index) {
          var doc;
          doc = $scope.projects[index];
          docModule.del_doc(doc);
        };
        $scope.load();
      }
    ]);
    return angular.module('foundry').run([
      '$templateCache', function($templateCache) {
        var html;
        html = '<div ng-controller="ProjectController"> <div class="breadcrumb"> <h1 ng-bind="breadcum"></h1> <div class="pull-right"> <a class="btn outline" ng-click="add_document()">Add Workspace</a> </div> </div> <div class="container-fluid"> <div class="row-fluid"> <div class="well-content"> <table class="table"> <thead> <tr> <th>Current Workspaces</th> </tr> </thead> <tbody> <tr ng-repeat="project in projects"> <td> <div class="user_listing"> <i class="icon-folder-open colored-icon" ></i> <span class="name">{{project.title}}</span> <span class="pill" ng-show="is_loaded(project)">Loaded</span> <div class="pull-right list_menu"> <a class="btn outline narrow" ng-click="switch($index)">switch</a> <a class="btn outline narrow" ng-click="edit($index)">edit</a> <a class="btn outline narrow" confirm on-confirm="delet_doc($index)" ng-hide="is_loaded(project)"><i class="icon-trash" ></i></a> </div> </div> </td> </tr> </tbody> </table> </div> </div> <script type="text/ng-template" id="newfile"> <div class="nimbus_form_modal"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-header"> <h4 class="modal-title">Add Document</h4> </div> <div class="modal-body"> <form method="get" accept-charset="utf-8"> <div class="nimb_form input" style="height:70px;"> <label>Name</label> <input type="text" ng-model="filename" placeholder="Type in document name" style="height:30px;margin-top:0px"> </div> </form> <button type="button" class="btn btn-primary" ng-click="create_doc()">Create</button> </div> </div><!-- /.modal-content --> </div><!-- /.modal-dialog --> </div> </script> <script type="text/ng-template" id="rename"> <div class="nimbus_form_modal"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-header"> <h4 class="modal-title">Rename Document</h4> </div> <div class="modal-body"> <form method="get" accept-charset="utf-8"> <div class="nimb_form input" style="height:70px;"> <label>Name</label> <input type="text" ng-model="newname" placeholder="Type in document name" style="height:30px;margin-top:0px"> </div> </form> <button type="button" class="btn btn-primary" ng-click="rename()">Rename</button> </div> </div><!-- /.modal-content --> </div><!-- /.modal-dialog --> </div> </script> <script type="text/ng-template" id="swithing"> <div class="title"> swtiching to <span class="label label-success">{{current_doc.title}}</span>...</div> </script> </div> </div>';
        return $templateCache.put('app/plugins/workspaces/index.html', html);
      }
    ]);
  };

}).call(this);
